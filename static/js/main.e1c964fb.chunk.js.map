{"version":3,"sources":["components/Navbar/Navbar.js","components/Navbar/index.js","helpers/typeColors.js","components/Card/Card.js","components/Card/index.js","services/pokemon.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","typeColors","bug","dragon","fairy","fire","ghost","ground","normal","psychic","steel","dark","electric","fighting","flying","grass","ice","poison","rock","water","bug_type","dragon_type","fairy_type","fire_type","ghost_type","ground_type","normal_type","psychic_type","steel_type","dark_type","electric_type","fighting_type","flying_type","grass_type","ice_type","poison_type","rock_type","water_type","Card","pokemon","src","sprites","front_default","alt","name","types","map","type","style","backgroundColor","weight","height","abilities","ability","getPokemon","url","Promise","resolve","reject","fetch","then","res","json","data","getAllPokemon","App","useState","pokemonData","setPokemonData","nextUrl","setNextUrl","prevUrl","setPrevUrl","loading","setLoading","initialURL","useEffect","response","next","previous","loadPokemon","results","fetchData","prev","all","pokemonRecord","_pokemonData","textAlign","color","i","key","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e1c964fb.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\n\nfunction Navbar() {\n  return (\n    <div className=\"Navbar\">\n      Pokemon API\n    </div>\n  );\n}\n\nexport default Navbar;\n","import Navbar from './Navbar';\n\nexport default Navbar;","const typeColors = {\n  bug: '#729f3f',\n  dragon: '#53a4cf',\n  fairy: '#fdb9e9',\n  fire: '#fd7d24',\n  ghost: '#7b62a3',\n  ground: '#e8d03b',\n  normal: '#8e9597',\n  psychic: '#f366b9',\n  steel: '#9eb7b',\n  dark: '#707070',\n  electric: '#eed535',\n  fighting: '#d56723',\n  flying: '#3dc7ef',\n  grass: '#9bcc50',\n  ice: '#51c4e7',\n  poison: '#b97fc9',\n  rock: '#a38c21',\n  water: '#4592c4',\n\n  bug_type: '#5e8532',\n  dragon_type: '#4082a4',\n  fairy_type: '#e1a3ce',\n  fire_type: '#e87220',\n  ghost_type: '#634f83',\n  ground_type: '#f7de3f',\n  normal_type: '#a4acaf',\n  psychic_type: '#acb0b0',\n  steel_type: '#b7bcbc',\n  dark_type: '#5b5a5a',\n  electric_type: '#e1c930',\n  fighting_type: '#c35e1f',\n  flying_type: '#37b5d9',\n  grass_type: '#8ab747',\n  ice_type: '#49b2d2',\n  poison_type: '#aa75b8',\n  rock_type: '#927d1e',\n  water_type: '#3e85b3'\n};\n\n\nexport default typeColors;","import React from 'react';\nimport typeColors from '../../helpers/typeColors'\nimport './style.css';\n\nfunction Card({ pokemon }) {\n  return (\n    <div className=\"Card\">\n      <div className=\"Card__img\" >\n        <img src={pokemon.sprites.front_default} alt=\"\" />\n      </div>\n      <div className=\"Card__name\">\n        {pokemon.name}\n      </div>\n      <div className=\"Card__types\">\n        {\n          pokemon.types.map(type => {\n            return (\n              <div className=\"Card__type\" style={{ backgroundColor: typeColors[type.type.name] }}>\n                {type.type.name}\n              </div>\n            )\n          })\n        }\n      </div>\n      <div className=\"Card__info\">\n        <div className=\"Card__data Card__data--weight\">\n          <p className=\"title\">Weight</p>\n          <p>{pokemon.weight}</p>\n        </div>\n        <div className=\"Card__data Card__data--weight\">\n          <p className=\"title\">Height</p>\n          <p>{pokemon.height}</p>\n        </div>\n        <div className=\"Card__data Card__data--ability\">\n          <p className=\"title\">Ability</p>\n          <p className=\"ability-name\">{pokemon.abilities[0].ability.name}</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import Card from './Card';\n\nexport default Card;","export function getPokemon({ url }) {\n  return new Promise((resolve, reject) => {\n    fetch(url).then(res => res.json())\n      .then(data => {\n        resolve(data)\n      })\n  });\n}\n\nexport async function getAllPokemon(url) {\n  return new Promise((resolve, reject) => {\n    fetch(url).then(res => res.json())\n      .then(data => {\n        resolve(data)\n      })\n  });\n}","import React, { useState, useEffect } from 'react';\nimport Navbar from './components/Navbar';\nimport Card from './components/Card';\nimport { getPokemon, getAllPokemon } from './services/pokemon';\nimport './App.css';\n\nfunction App() {\n  const [pokemonData, setPokemonData] = useState([])\n  const [nextUrl, setNextUrl] = useState('');\n  const [prevUrl, setPrevUrl] = useState('');\n  const [loading, setLoading] = useState(true);\n  const initialURL = 'https://pokeapi.co/api/v2/pokemon'\n\n  useEffect(() => {\n    async function fetchData() {\n      let response = await getAllPokemon(initialURL)\n      setNextUrl(response.next);\n      setPrevUrl(response.previous);\n      await loadPokemon(response.results);\n      setLoading(false);\n    }\n    fetchData();\n  }, [])\n\n  const next = async () => {\n    setLoading(true);\n    let data = await getAllPokemon(nextUrl);\n    await loadPokemon(data.results);\n    setNextUrl(data.next);\n    setPrevUrl(data.previous);\n    setLoading(false);\n  }\n\n  const prev = async () => {\n    if (!prevUrl) return;\n    setLoading(true);\n    let data = await getAllPokemon(prevUrl);\n    await loadPokemon(data.results);\n    setNextUrl(data.next);\n    setPrevUrl(data.previous);\n    setLoading(false);\n  }\n\n  const loadPokemon = async (data) => {\n    let _pokemonData = await Promise.all(data.map(async pokemon => {\n      let pokemonRecord = await getPokemon(pokemon)\n      return pokemonRecord\n    }))\n    setPokemonData(_pokemonData);\n  }\n\n  return (\n    <>\n      <Navbar />\n      <div className=\"pokemon-container\">\n        {loading ? <h1 style={{ textAlign: 'center', color: 'white' }}>Cargando...</h1> : (\n          <>\n            <div className=\"grid-container\">\n              {pokemonData.map((pokemon, i) => {\n                return <Card key={i} pokemon={pokemon} />\n              })}\n            </div>\n          </>\n        )}\n      </div>\n      <div className=\"btn\">\n        <button onClick={prev}>Anterior</button>\n        <button onClick={next}>Siguiente</button>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] localhost para IPv6.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 localhost para IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl, config);\n\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'Esta aplicación web está siendo servida primero en cache'\n          );\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              console.log(\n                'En este punto, se ha obtenido el contenido pre cache actualizado, pero el service worker anterior ' +\n                'seguirá sirviendo al mayor contenido hasta que se cierren todas las pestañas del cliente.'\n              );\n\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              console.log('El contenido se almacena en caché para su uso sin conexión.');\n\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error durante el registro del service worker:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Comprueba si se puede encontrar el service worker. Si no puede recargar la página.\n  fetch(swUrl)\n    .then(response => {\n      // Verifica si existe el service worker y que se esté obteniendo un archivo JS.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No se encontró ningún service worker. Probablemente una aplicación diferente. Vuelve a cargar la página.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker encontrado. Continúa.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}